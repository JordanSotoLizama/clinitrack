rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- helpers ---------- */
    function isSignedIn() { return request.auth != null; }
    function isSelf(uid)   { return isSignedIn() && request.auth.uid == uid; }

    // Lee el rol desde users/{auth.uid}
    function myRole() {
      return isSignedIn()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
        : null;
    }
    function isAdmin()  { return myRole() == 'admin'; }
    function hasStaff() { return myRole() in ['admin','medico','recepcion','laboratorio']; }

    /* ---------- users (staff & médicos) ---------- */
    // Paciente puede leer perfiles de médicos (resource.role == 'medico')
    match /users/{uid} {
      allow read: if isSelf(uid) || isAdmin() || resource.data.role == 'medico';
      allow create, update: if isSelf(uid) || isAdmin();
      allow delete: if false;
    }

    /* ---------- patients (ficha del paciente) ---------- */
    match /patients/{uid} {
      allow read, create, update: if isSelf(uid) || isAdmin();
      allow delete: if false;
    }

    /* ---------- rutIndex (unicidad de RUT) ---------- */
    match /rutIndex/{rut} {
      allow read: if isAdmin();
      allow create: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && !exists(/databases/$(database)/documents/rutIndex/$(rut));
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow update: if false;
    }

    /* ---------- doctor_slots ---------- */
    // Solo lectura desde cliente. La creación/edición se hace por Cloud Functions.
    match /doctor_slots/{slotId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /* ---------- appointments ---------- */
    // Solo lectura (el paciente dueño, el médico asignado o staff).
    // Toda escritura la hace el backend: bookSlot/confirmPayment/cancelMyAppointment.
    match /appointments/{appointmentId} {
      allow read: if hasStaff()
        || (isSignedIn() && (
             resource.data.patientUid == request.auth.uid ||
             resource.data.doctorUid  == request.auth.uid
           ));
      allow create, update, delete: if false;
    }

    /* ---------- payments (PayPal sandbox) ---------- */
    // El cliente crea el registro de pago; la Function confirmPayment valida y marca la cita.
    match /payments/{paymentId} {
      allow create: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.appointmentId is string
        && request.resource.data.provider == 'paypal'
        && request.resource.data.orderId is string
        && request.resource.data.amount is number
        && request.resource.data.status in ['approved','failed']
        && request.resource.data.createdAt != null;

      // El usuario solo puede leer sus propios pagos
      allow get, list: if isSignedIn() && resource.data.uid == request.auth.uid;

      allow update, delete: if false;
    }

    /* ---------- (opcional) outbox de correo ---------- */
    match /mail/{id} {
      allow create: if isSignedIn() && request.resource.data.to is string;
      allow read, update, delete: if false;
    }

    /* ---------- catch-all ---------- */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}